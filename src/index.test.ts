import { describe, it, expect, expectTypeOf } from "vitest";
import rtlFriendly from "./index.js";
import { name, version } from "../package.json";
import type { RuleModule } from "@typescript-eslint/utils/ts-eslint";
import type { MessageId } from "./rules/no-phyisical-properties/rule.js";

// useless tests generated by copilot :)

describe("rtlFriendly", () => {
  it("should have correct meta information", () => {
    expect(rtlFriendly.meta.name).toBe(name);
    expect(rtlFriendly.meta.version).toBe(version);
  });

  it("should have the no-physical-properties rule", () => {
    expect(rtlFriendly.rules).toHaveProperty("no-physical-properties");
    expectTypeOf(rtlFriendly.rules["no-physical-properties"]).toMatchTypeOf<
      RuleModule<MessageId>
    >();
  });

  describe("configs", () => {
    it("should have a recommended config", () => {
      expect(rtlFriendly.configs).toHaveProperty("recommended");
    });

    it("recommended config should have the correct rules", () => {
      expect(rtlFriendly.configs.recommended.rules).toHaveProperty(
        "rtl-friendly/no-physical-properties",
        "warn"
      );
    });

    it("recommended config should include the rtlFriendly plugin", () => {
      expect(rtlFriendly.configs.recommended.plugins).toHaveProperty(
        "rtl-friendly",
        rtlFriendly
      );
    });

    it("recommended config should have jsx enabled in parser options", () => {
      expect(
        rtlFriendly.configs.recommended.languageOptions?.parserOptions
          ?.ecmaFeatures?.jsx
      ).toBe(true);
    });
  });
});
